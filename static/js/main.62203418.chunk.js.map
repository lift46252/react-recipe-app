{"version":3,"sources":["Components/Modal.js","Components/Recipe.js","Components/Api.js","App.js","serviceWorker.js","index.js"],"names":["MyVerticallyCenteredModal","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","recipe","label","Body","Container","Row","Col","md","style","listStyleType","padding","ingredients","map","index","key","text","src","image","alt","width","Footer","className","fontSize","calories","toFixed","textAlign","Button","onClick","onHide","App","React","useState","modalShow","setModalShow","variant","show","Recipe","lg","Card","height","overflow","borderRadius","display","Img","Api","recipes","setRecipes","search","setSearch","clicked","setClicked","useEffect","getRecipes","a","fetch","response","json","data","hits","Form","justifyContent","onSubmit","e","preventDefault","Control","marginRight","type","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62203418.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Modal,Button,Container,Row,Col} from 'react-bootstrap'\r\nfunction MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal \r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n           {props.recipe.label}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Container>\r\n        <Row>\r\n        <Col md={6}>\r\n            <ul style={{listStyleType:'none', padding:0}}>\r\n                {props.recipe.ingredients.map((ingredients,index) =>(\r\n                    <li key={index}>{ingredients.text}</li>\r\n                ))}\r\n            </ul>\r\n        </Col>\r\n        <Col md={6}>\r\n            <img src={props.recipe.image} alt={props.recipe.label} style={{padding:0 , width:'100%'}}></img>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Container>\r\n            <Row>\r\n            <Col md={6}>\r\n                <p className='text-muted' style={{fontSize:12,}}>Calories {props.recipe.calories.toFixed(0)} kcal</p>\r\n            </Col>\r\n            <Col md={6} style={{textAlign:'right'}}>\r\n                <Button onClick={props.onHide}>Close</Button>        \r\n            </Col>\r\n                \r\n            </Row>\r\n        </Container>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  \r\n  function App(props) {\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n  \r\n    return (\r\n      <>\r\n        <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n          View More\r\n        </Button>\r\n  \r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n          recipe={props.recipe}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  \r\nexport default App","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card,Col} from 'react-bootstrap'\r\nimport App from './Modal'\r\nconst Recipe = (props) =>{\r\n        return(\r\n                    <Col md={6} lg={4}>\r\n                        <Card style={{ width: '18rem' ,height: '35rem', overflow: 'hidden', borderRadius:15,display:\"inline-block\"}}>\r\n                        <Card.Img variant=\"top\" src={props.recipe.image} alt={props.recipe.label}/>\r\n                        <Card.Body style={{padding:10}}>\r\n                            <Card.Title>{props.recipe.label}</Card.Title>\r\n                            <p>Calories {props.recipe.calories.toFixed(0)} kcal</p>\r\n                            <App recipe={props.recipe}>view More</App>\r\n                                <ul style={{listStyleType:'none', padding:0}}>\r\n                                    {props.recipe.ingredients.map((ingredients,index) =>(\r\n                                        <li key={index}>{ingredients.text}</li>\r\n                                    ))}\r\n                                </ul>\r\n                        </Card.Body>\r\n                        </Card>                \r\n                    </Col>\r\n        )\r\n}\r\nexport default Recipe","import React,{useEffect,useState} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button,Form,Container,Row} from 'react-bootstrap'\r\nimport Recipe from './Recipe'\r\nimport \"../App.css\"\r\nconst Api = () => {\r\n    const API_ID = \"da34ab48\",\r\n          API_KEY = \"ad18c26e653fded574b59174184599f5\",\r\n          [recipes,setRecipes] = useState([]),\r\n          [search,setSearch] = useState(\"\"),\r\n          [clicked,setClicked] = useState(\"chicken\");\r\n\r\n    useEffect(() =>{\r\n        getRecipes();\r\n    }, [clicked]);\r\n    const getRecipes = async () => {\r\n        const response = await fetch(`https://api.edamam.com/search?q=${clicked}&app_id=${API_ID}&app_key=${API_KEY}`),\r\n                data = await response.json();\r\n        setRecipes(data.hits);\r\n        // console.log(data.hits);\r\n    }\r\n    const updateSearch = e =>{\r\n        setSearch(e.target.value);\r\n    }\r\n    const getSearch = e =>{\r\n        e.preventDefault();\r\n        setClicked(search);\r\n        setSearch(\"\")\r\n    }\r\n    return(\r\n        <div className='bg-gradient'>\r\n            <Form className=\"search-form\" style={{display:'flex', justifyContent:'center' ,padding:' 20px 0px 20px 0px '}} onSubmit={getSearch}>\r\n                <Form.Control style={{width:'60vh', marginRight:5}} type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}></Form.Control>\r\n                <Button  variant=\"primary\" type=\"submit\" className=\"search-btn\">Search</Button>\r\n            </Form>\r\n            <Container style={{textAlign:'center'}}>\r\n                <Row>\r\n                    {recipes.map(recipe =>(\r\n                        <Recipe key={recipe.recipe.label} recipe={recipe.recipe}/>\r\n                    ))}   \r\n                    </Row>\r\n            </Container>             \r\n        </div>\r\n    )\r\n}\r\nexport default Api","import React from 'react';\nimport './App.css';\nimport Api from './Components/Api'\n\nfunction App() {\n\n\n  return (\n      <Api/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}